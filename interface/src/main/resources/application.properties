server.port=8081
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=

spring.h2.console.enabled=true
spring.h2.console.path=/h2console/

spring.jpa.show-sql = true
spring.jpa.hibernate.ddl-auto = create
spring.jpa.defer-datasource-initialization=true

spring.kafka.bootstrap-servers=localhost:29092
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
# by default, acks=all && error retry enabled
spring.kafka.producer.acks=1
spring.kafka.producer.retries=1
spring.kafka.producer.properties.retry.backoff.ms=100
# by default, error retry restricted by timeout
spring.kafka.producer.properties.delivery.timeout.ms=120000

spring.kafka.consumer.group-id=aws-msa-sample-delivery
spring.kafka.consumer.auto-offset-reset=latest
# gracefully handle message parsing error with ErrorHandlingDeserializer
spring.kafka.consumer.key-deserializer=org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
spring.kafka.consumer.properties.spring.deserializer.key.delegate.class=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.properties.spring.deserializer.value.delegate.class=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.trusted.packages=com.aws.peach.domain.*

## how long to wait to read transactional messages until the associated transaction has been committed
#spring.kafka.consumer.isolation-level=read_committed
#spring.kafka.consumer.enable-auto-commit=false

kafka.topic.delivery-event=delivery.status.change
kafka.topic.order-state-change=order_state_change